# Por defecto, docker-compose puede leer variables de entorno definidas en un fichero .env
version: '3'

services:
  db:
    image: postgres:14.3
    restart: always
    ports:
      - '${DB_PORT}:${DB_PORT}'
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    container_name: anylistDB
    volumes:
      - ./postgres:/var/lib/postgresql/data

  anylistapp:
    depends_on:
      - db
    build:
      context: .
      dockerfile: Dockerfile
    image: nest-graphql
    container_name: AnylistApp
    restart: always # reiniciar el contenedor si se detiene
    ports:
      - '${PORT}:${PORT}'

    environment:
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${PORT}
# Para la construcción de la imagen de la aplicación de Nest.
# El objetivo es tener un contenedor autosuficiente, con su Sistema Operativo, con su aplicación
# de Node corriendo, en la que si bajamos y subimos la imagen automáticamente está todo corriendo porque
# ya está instalada la aplicación de Node.
# https://gist.github.com/Klerith/eb30ce8ca7e0b70f19fc5efee3bd9b9b

# Build
# docker-compose -f docker-compose.prod.yml --env-file .env.prod up --build

# Run
# docker-compose -f docker-compose.prod.yml --env-file .env.prod up

# Sin usar el docker-compose
# Esto solo para saberlo.
#    Para construir
#       docker build -t nest-graphql-prod .
#
#    Para ejecutar, pero cuidado con las variables de entorno porque hay que indicarlas, bien manualmente
#    o usando el fichero .env.prod. También se indica el puerto de mi equipo 8080, que se comunica con el
#    4000 del contenedor.
#       docker run --env-file=.env.prod -p 8080:4000 nest-graphql-prod
